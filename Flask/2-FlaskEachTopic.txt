**Flask Framework - Complete Guide**  

---

**1. Introduction to Flask**  

**1.1 What is Flask?**  
**Definition:** Flask is a lightweight and modular web framework in Python used for building web applications and APIs. It is based on **Werkzeug (WSGI toolkit)** and **Jinja2 (templating engine)**.  

**Example:**  
```python
from flask import Flask  
app = Flask(__name__)  

@app.route("/")  
def home():  
return "Hello, Flask!"  

if __name__ == "__main__":  
app.run(debug=True)  
```

---

**1.2 Features of Flask**  
- **Lightweight & Minimal** – No built-in database or ORM.  
- **Modular** – Use only what is needed.  
- **Jinja2 Templating** – Supports dynamic HTML generation.  
- **RESTful API Support** – Best for microservices and APIs.  
- **Secure** – Extensions for authentication and security.  

---

**1.3 Flask vs Django**  

| Feature           | Flask (Micro)           | Django (Full-stack) |
|-------------------|-------------------------|---------------------|
| Flexibility       | High                    | Opinionated         |
| Database          | Optional (SQLAlchemy)   | Built-in ORM        |
| Template Engine   | Jinja2 | Django Template|                     |
| Use Case          | APIs, Small Apps        | Large Applications  |

---

**1.4 Installing Flask**  
**Command to install Flask:**  
```bash
pip install flask
```

---

**1.5 First Flask Application**  
**Example:**  
```python
from flask import Flask  
app = Flask(__name__)  

@app.route("/")  
def hello():  
return "Welcome to Flask!"  

if __name__ == "__main__":  
app.run(debug=True)  
```
---

**2. Flask Basics**  

**2.1 Routing**  
**Definition:** Mapping URLs to Python functions.  

**Example:**  
```python
@app.route("/about")  
def about():  
return "About Page"  
```

---

**2.2 URL Converters**  
**Definition:** Convert URL path parameters.  

**Example:**  
```python
@app.route("/user/<int:id>")  
def user(id):  
return f"User ID: {id}"  
```

---

**2.3 HTTP Methods**  
**Definition:** Define request types (GET, POST, PUT, DELETE).  

**Example:**  
```python
@app.route("/submit", methods=["POST"])  
def submit():  
return "Form Submitted"  
```

---

**2.4 Request and Response Objects**  
**Definition:** Handle incoming requests and responses.  

**Example:**  
```python
from flask import request  
@app.route("/data", methods=["POST"])  
def data():  
return f"Received: {request.json}"  
```

---

**2.5 Flask Debug Mode**  
**Definition:** Enables debugging and auto-reloading.  

**Enable Debug Mode:**  
```python
app.run(debug=True)
```

---

**3. Templates & Static Files**  

**3.1 Jinja2 Templating Engine**  
**Definition:** Allows dynamic HTML rendering.  

**Example:**  
```html
<h1>Welcome {{ name }}!</h1>
```

---

**3.2 Rendering HTML Templates**  
**Definition:** Pass variables to templates.  

**Example:**  
```python
from flask import render_template  
@app.route("/profile/<name>")  
def profile(name):  
return render_template("profile.html", name=name)  
```

---

**3.3 Passing Data to Templates**  
**Definition:** Use Python variables inside HTML.  

**Example:**  
```html
{% for item in items %}  
<p>{{ item }}</p>  
{% endfor %}
```

---

**3.4 Template Inheritance**  
**Definition:** Reuse common layouts.  

**Example:**  
```html
{% extends "base.html" %}  
{% block content %}  
<h2>Dashboard</h2>  
{% endblock %}
```

---

**3.5 Using Static Files (CSS, JS, Images)**  
**Definition:** Store static assets in `static/` folder.  

**Example:**  
```html
<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
```

---

**4. Flask Forms**  

**4.1 Handling Forms**  
**Definition:** Capture user inputs.  

**Example:**  
```python
@app.route("/submit", methods=["POST"])  
def submit():  
name = request.form["name"]  
return f"Hello, {name}!"  
```

---

**4.2 Flask-WTF (WTForms)**  
**Definition:** Flask extension for handling forms.  

**Example:**  
```python
from flask_wtf import FlaskForm  
from wtforms import StringField, SubmitField  

class MyForm(FlaskForm):  
name = StringField("Enter Name")  
submit = SubmitField("Submit")  
```

---

**4.3 Form Validation**  
**Definition:** Validate form data before processing.  

**Example:**  
```python
class MyForm(FlaskForm):  
name = StringField("Enter Name", validators=[DataRequired()])  
```

---

**5. Flask and Databases**  

**5.1 SQLAlchemy ORM**  
**Definition:** Object Relational Mapping for databases.  

**Example:**  
```python
from flask_sqlalchemy import SQLAlchemy  
db = SQLAlchemy(app)  
```

---

**5.2 Flask-SQLAlchemy**  
**Definition:** Integrates SQLAlchemy with Flask.  

**Example:**  
```python
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///users.db"
db.create_all()
```

---

**5.3 Database Migrations with Flask-Migrate**  
**Definition:** Handles database schema changes.  

**Example:**  
```bash
flask db migrate -m "Initial migration"
```

---

**5.4 Performing CRUD Operations**  
**Definition:** Create, Read, Update, Delete records.  

**Example:**  
```python
user = User(name="John")  
db.session.add(user)  
db.session.commit()
```

---

**6. Flask Authentication & Security**  

**6.1 User Authentication**  
**Definition:** Secure user login.  

**Example:**  
```python
from flask_login import LoginManager  
login_manager = LoginManager(app)  
```

---

**6.2 Flask-Login (Session Management)**  
**Definition:** Handles user sessions.  

**Example:**  
```python
@login_manager.user_loader  
def load_user(user_id):  
return User.query.get(int(user_id))  
```

---

**6.3 Flask-Bcrypt (Password Hashing)**  
**Definition:** Encrypts passwords.  

**Example:**  
```python
from flask_bcrypt import Bcrypt  
bcrypt = Bcrypt(app)  
hashed_pw = bcrypt.generate_password_hash("mypassword").decode('utf-8')  
```

---

**6.4 JWT Authentication**  
**Definition:** Secure API authentication with tokens.  

**Example:**  
```python
from flask_jwt_extended import create_access_token  
token = create_access_token(identity="user123")  
```

---
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Flask Framework - Complete Guide**  \n",
    "\n",
    "## **1. Introduction to Flask**  \n",
    "**Definition:** Flask is a lightweight Python web framework designed for building web applications and REST APIs quickly. It follows the **WSGI** standard and is based on **Werkzeug** and **Jinja2**.  \n",
    "\n",
    "**Example: Installing Flask**  \n",
    "```bash\n",
    "pip install flask\n",
    "```  \n",
    "**Basic Flask Application**  \n",
    "```python\n",
    "from flask import Flask  \n",
    "app = Flask(__name__)  \n",
    "\n",
    "@app.route(\"/\")  \n",
    "def home():  \n",
    "return \"Hello, Flask!\"  \n",
    "\n",
    "if __name__ == \"__main__\":  \n",
    "app.run(debug=True)  \n",
    "```\n",
    "\n",
    "## **2. Flask Basics**  \n",
    "\n",
    "### **2.1 Routing**  \n",
    "**Definition:** Routing determines how URLs map to functions in a Flask application.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "@app.route(\"/about\")  \n",
    "def about():  \n",
    "return \"About Page\"  \n",
    "```  \n",
    "\n",
    "### **2.2 URL Converters**  \n",
    "**Definition:** URL converters allow dynamic URLs using placeholders like `<int:id>`, `<string:name>`, etc.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "@app.route(\"/user/<int:id>\")  \n",
    "def user(id):  \n",
    "return f\"User ID: {id}\"  \n",
    "```\n",
    "\n",
    "### **2.3 HTTP Methods**  \n",
    "**Definition:** HTTP methods like GET, POST, PUT, DELETE define how data is sent and received.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "@app.route(\"/submit\", methods=[\"POST\"])  \n",
    "def submit():  \n",
    "return \"Form Submitted\"  \n",
    "```\n",
    "\n",
    "### **2.4 Request and Response Objects**  \n",
    "**Definition:** Request and Response objects handle incoming HTTP requests and responses.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "from flask import request  \n",
    "@app.route(\"/data\", methods=[\"POST\"])  \n",
    "def data():  \n",
    "return f\"Received: {request.json}\"  \n",
    "```\n",
    "\n",
    "---\n",
    "\n",
    "## **3. Templates & Static Files**  \n",
    "\n",
    "### **3.1 Jinja2 Templating**  \n",
    "**Definition:** Jinja2 allows dynamic HTML generation with variables and loops.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "from flask import render_template  \n",
    "@app.route(\"/profile/<name>\")  \n",
    "def profile(name):  \n",
    "return render_template(\"profile.html\", name=name)  \n",
    "```\n",
    "**profile.html**  \n",
    "```html\n",
    "<html>  \n",
    "<body>  \n",
    "<h1>Welcome {{ name }}!</h1>  \n",
    "</body>  \n",
    "</html>  \n",
    "```\n",
    "\n",
    "### **3.2 Static Files**  \n",
    "**Definition:** Static files like CSS, JavaScript, and images are stored in the `static/` directory.  \n",
    "\n",
    "**Example:**  \n",
    "```html\n",
    "<link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n",
    "```\n",
    "\n",
    "---\n",
    "\n",
    "## **4. Flask Forms**  \n",
    "**Definition:** Flask-WTF simplifies handling forms with validation.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "from flask_wtf import FlaskForm  \n",
    "from wtforms import StringField, SubmitField  \n",
    "class MyForm(FlaskForm):  \n",
    "name = StringField(\"Enter Name\")  \n",
    "submit = SubmitField(\"Submit\")  \n",
    "```\n",
    "\n",
    "---\n",
    "\n",
    "## **5. Flask and Databases**  \n",
    "**Definition:** Flask-SQLAlchemy integrates databases like MySQL, PostgreSQL, and SQLite.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "from flask_sqlalchemy import SQLAlchemy  \n",
    "app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///users.db\"  \n",
    "db = SQLAlchemy(app)  \n",
    "\n",
    "class User(db.Model):  \n",
    "id = db.Column(db.Integer, primary_key=True)  \n",
    "name = db.Column(db.String(100))  \n",
    "```\n",
    "\n",
    "---\n",
    "\n",
    "## **6. Flask Authentication & Security**  \n",
    "\n",
    "### **6.1 Flask-Login (User Sessions)**  \n",
    "**Definition:** Manages user login sessions securely.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "from flask_login import LoginManager\n",
    "login_manager = LoginManager(app)\n",
    "```\n",
    "\n",
    "### **6.2 Password Hashing (Flask-Bcrypt)**  \n",
    "**Definition:** Encrypts passwords for security.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "from flask_bcrypt import Bcrypt  \n",
    "bcrypt = Bcrypt(app)  \n",
    "hashed_password = bcrypt.generate_password_hash(\"mypassword\").decode('utf-8')  \n",
    "```\n",
    "\n",
    "### **6.3 JWT Authentication**  \n",
    "**Definition:** JSON Web Tokens (JWT) are used for secure API authentication.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "from flask_jwt_extended import create_access_token  \n",
    "access_token = create_access_token(identity=\"user123\")  \n",
    "```\n",
    "\n",
    "---\n",
    "\n",
    "## **7. Flask APIs & RESTful Services**  \n",
    "**Definition:** Used to create APIs that return JSON responses.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "from flask import jsonify  \n",
    "@app.route(\"/api/user/<name>\")  \n",
    "def api_user(name):  \n",
    "return jsonify({\"user\": name, \"status\": \"active\"})  \n",
    "```\n",
    "\n",
    "**Flask-RESTful API Example**  \n",
    "```python\n",
    "from flask_restful import Api, Resource  \n",
    "api = Api(app)  \n",
    "\n",
    "class HelloWorld(Resource):  \n",
    "def get(self):  \n",
    "    return {\"message\": \"Hello, World!\"}  \n",
    "\n",
    "api.add_resource(HelloWorld, \"/\")  \n",
    "```\n",
    "\n",
    "---\n",
    "\n",
    "## **8. Middleware and Request Handling**  \n",
    "**Definition:** Middleware executes functions before and after requests.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "@app.before_request  \n",
    "def before():  \n",
    "print(\"Before request executed!\")  \n",
    "```\n",
    "\n",
    "---\n",
    "\n",
    "## **9. Flask Configuration & Deployment**  \n",
    "**Definition:** Configures Flask settings and enables deployment on cloud platforms.  \n",
    "\n",
    "**Dockerfile for Deployment:**  \n",
    "```dockerfile\n",
    "FROM python:3.9  \n",
    "WORKDIR /app  \n",
    "COPY . .  \n",
    "RUN pip install -r requirements.txt  \n",
    "CMD [\"python\", \"app.py\"]  \n",
    "```\n",
    "\n",
    "---\n",
    "\n",
    "## **10. Advanced Flask Features**  \n",
    "\n",
    "### **10.1 Flask Blueprints**  \n",
    "**Definition:** Organizes large applications into multiple modules.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "from flask import Blueprint  \n",
    "auth_bp = Blueprint(\"auth\", __name__)  \n",
    "\n",
    "@auth_bp.route(\"/login\")  \n",
    "def login():  \n",
    "return \"Login Page\"  \n",
    "\n",
    "app.register_blueprint(auth_bp, url_prefix=\"/auth\")  \n",
    "```\n",
    "\n",
    "### **10.2 WebSockets with Flask-SocketIO**  \n",
    "**Definition:** Enables real-time communication.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "from flask_socketio import SocketIO  \n",
    "socketio = SocketIO(app)  \n",
    "@socketio.on(\"message\")  \n",
    "def handle_message(msg):  \n",
    "print(\"Received:\", msg)  \n",
    "```\n",
    "\n",
    "---\n",
    "\n",
    "## **11. Testing Flask Applications**  \n",
    "**Definition:** Ensures application reliability with unit testing.  \n",
    "\n",
    "**Example:**  \n",
    "```python\n",
    "import unittest  \n",
    "class FlaskTest(unittest.TestCase):  \n",
    "def test_home(self):  \n",
    "    response = app.test_client().get(\"/\")  \n",
    "    self.assertEqual(response.status_code, 200)  \n",
    "```\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
